clc; clear; close all;
format long;

plots = initializePlots();

linkage = Linkage(plots);
% linkage.analyzeStatics()
linkage.analyzeDynamics()
savePlots(plots)

function savePlots(plots)
    fieldNames = fieldnames(plots);
    for i = 1:numel(fieldNames)
        fieldName = fieldNames{i};
        folder = "matlab-plots";
        fileName = fieldName;
        fullFileName = fullfile(folder, fileName);

        saveas(plots.(fieldName), fullFileName, 'png')
    end
end

function plots = initializePlots()
    % crankAngleLabel = "Crank Angle (degrees)";
    crankAngleLabel = "Crank Angle Change (degrees)";
    plotConfig = struct('linJointPos', {["Joint X Coordinate for Single Crank Revolution",...
                                         "Joint Y Coordinate for Single Crank Revolution",...
                                         "Joint Linear Position for Single Crank Revolution"]},...
                        'linJointVelX', {[crankAngleLabel,...
                                          "Velocity (m/s)",...
                                          "Joint Linear Velocity in x-Direction vs. Crank Angle"]},...
                        'linJointVelY', {[crankAngleLabel,...
                                          "Velocity (m/s)",...
                                          "Joint Linear Velocity in y-Direction vs. Crank Angle"]},...
                        'linJointAccel', {[crankAngleLabel,...
                                           "Acceleration (m/s^2)",...
                                           "Joint Linear Acceleration vs. Crank Angle"]},...
                        'angLinkVel', {[crankAngleLabel,...
                                        "Angular Velocity (rad/s)",...
                                        "Link Angular Velocity vs. Crank Angle"]},...
                        'angLinkAccel', {[crankAngleLabel,...
                                          "Angular Acceleration (rad/s^2)",...
                                          "Link Angular Acceleration vs. Crank Angle"]},...
                        'linCOMAccel', {[crankAngleLabel,...
                                        "Acceleration (m/s^2)",...
                                        "Linear COM Acceleration vs. Crank Angle"]},...
                        'dynamicForce', {[crankAngleLabel,...
                                          "Force (N)",...
                                          "Dynamic Force at Link COM vs. Crank Angle"]},...
                        'dynamicTorque', {[crankAngleLabel,...
                                           "Torque (N\cdot m^2)",...
                                           "Dynamic Torque on Crank vs. Crank Angle"]}...
                        );
    % 'accel', {},...
    % 'staticForce', {},...
    % 'staticTorque', {},...
    % Set up figures
    plots = struct('linJointPos', {},...
                   'linJointVelX', {},...
                   'linJointVelY', {},...
                   'angLinkVel', {},...
                   'angLinkAccel', {},...
                   'linCOMAccel', {}...
                  );
    % 'linJointAccel', {},...
    % 'accel', {},...
    % 'staticForce', {},...
    % 'staticTorque', {},...
    % 'dynamicForce', {},...
    % 'dynamicTorque', {},...
    plotNames = fieldnames(plots);
    plots = struct();

    % Store axes handles to each plot
    for i = 1:numel(plotNames)
        fieldName = plotNames{i};
        figure('Name', fieldName);

        % Get axes handle
        plots.(fieldName) = axes;

        % Hold on
        hold(plots.(fieldName), 'on')

        if (fieldName ~= "angLinkAccel") | (fieldName ~= "angLinkVelX") | (fieldName ~= "angLinkVelY")
            axis(plots.(fieldName), 'equal')
        end
        if (fieldName == "angLinkVelX") | (fieldName == "angLinkVelY") |...
                (fieldName == "linJointVelX") | (fieldName == "linJointVelX")
            axis(plots.(fieldName), 'tight')
        end

        % Labels and title
        xlabel(plots.(fieldName), plotConfig.(fieldName)(1))
        ylabel(plots.(fieldName), plotConfig.(fieldName)(2))
        title(plots.(fieldName), plotConfig.(fieldName)(3))

        % Aspect ratio
        if (fieldName ~= "linJointPos") | (fieldName ~= "linCOMAccel")
            daspect(plots.(fieldName), [30, 1, 1])
        end
    end
end
